import groovy.xml.MarkupBuilder
import javax.xml.bind.JAXB
import org.jooq.util.GenerationTool

apply plugin: "java"
apply plugin: "application"

mainClassName = "capstat.Main"

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    // Normal dependencies
    compile group: "commons-codec", name: "commons-codec", version: "1.10"
    compile group: "mysql", name: "mysql-connector-java", version: "5.1.35"
    compile group: "org.jooq", name: "jooq", version: "3.6.1"

    // Test dependencies
    // NOTE: these dependencies are _additional_ dependencies used for compiling
    // and running the tests. All normal dependencies are also available while
    // running the tests, so they do not need to be specified here as well.
    testCompile group: "junit", name: "junit", version: "4.11"
}

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        classpath 'org.jooq:jooq-codegen:3.6.1'
        classpath 'mysql:mysql-connector-java:+'
    }
}

// Defines a writer and xml builder to construct jooq script.
def writer = new StringWriter()
def xml = new MarkupBuilder(writer)
        .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.6.0.xsd') {

    // Defining jdbc driver with user credentials.
    jdbc() {
        driver('com.mysql.jdbc.Driver')
        url('jdbc:mysql://localhost:3306/capstat')
        user('capstat_user')
        password('1234')
    }

    generator() {
        database() {
        }
        generate() {
        }
        target() {
            packageName('org.jooq.generated.db') // The folder to generate the database-classes.
            directory('src/main/java') // The path to put that folder.
        }
    }
}

// Run the code generator
// ----------------------
GenerationTool.main(
        JAXB.unmarshal(new StringReader(writer.toString()), org.jooq.util.jaxb.Configuration.class)
)
// End the code generator

jar {
    baseName = "capstat"
    version = "0.0.1"
    manifest {
        attributes "Main-Class": "$mainClassName"
    }
}

run {
    standardInput = System.in
}

test {
    testLogging {
        exceptionFormat = "full"
    }
}
